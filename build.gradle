buildscript {
	ext {
		springBootVersion = '1.4.0.RELEASE'
		springCloudVersion = '1.2.3.RELEASE'
	}
	repositories {
		mavenCentral()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
		maven {
            url "https://plugins.gradle.org/m2/"
        }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath "com.moowork.gradle:gradle-node-plugin:0.13"		
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'
apply plugin: 'com.moowork.node'

jar {
	baseName = 'rest-data'
	version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
}


dependencies {
    compile("org.springframework.boot:spring-boot-starter-data-mongodb:$springBootVersion")
    compile("org.springframework.boot:spring-boot-starter-data-rest:$springBootVersion")
    compile('org.springframework.data:spring-data-rest-webmvc')
    compile("org.springframework.boot:spring-boot-starter-actuator")
	compile("org.springframework.boot:spring-boot-starter-hateoas")	
	compile('org.springframework.boot:spring-boot-starter-cache')
	compile("org.springframework.cloud:spring-cloud-spring-service-connector:$springCloudVersion")
    compile("org.springframework.cloud:spring-cloud-cloudfoundry-connector:$springCloudVersion")
	compile("org.springframework.boot:spring-boot-starter-thymeleaf")
	
	compile('org.projectlombok:lombok:1.16.8')
	compile('ch.qos.logback:logback-classic:1.1.7')	
	compile('com.google.guava:guava:19.0')	
    compile('org.json:json:20160212')
		
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('junit:junit')
	testCompile('de.flapdoodle.embed:de.flapdoodle.embed.mongo:1.50.3')
}


eclipse {
	classpath {
		 containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
		 containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
	}
}

task myScript(type: NodeTask) {
  script = file('src/main/resources/static/app.js')
}

node {
  // Version of node to use.
  version = '0.11.10'

  // Version of npm to use.
  npmVersion = '2.1.5'

  // Base URL for fetching node distributions (change if you have a mirror).
  distBaseUrl = 'https://nodejs.org/dist'

  // If true, it will download node using above parameters.
  // If false, it will try to use globally installed node.
  download = true

  // Set the work directory for unpacking node
  workDir = file("${project.buildDir}/nodejs")

  // Set the work directory where node_modules should be located
  nodeModulesDir = file("${project.projectDir}")
}
